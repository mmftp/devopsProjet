version: "3.9"

services:
  redis:
    image: redis:alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - back-tier
    volumes:
      - redis-data:/data  

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - back-tier
    volumes:
      - db-data:/var/lib/postgresql/data  

  voting-app:
    # üè∑Ô∏è Tag unique pour le service Voting-app dans un seul repo Docker Hub
    image: docker.io/${DOCKERHUB_NAMESPACE}/voting-app:voting-app-${IMAGE_TAG}
    build: ./vote
    environment:
      OPTION_A: ${OPTION_A}
      OPTION_B: ${OPTION_B}
    ports:
      - "${VOTING_PORT}:443"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - front-tier
      - back-tier

  result-app:
    # üè∑Ô∏è Tag unique pour le service Result-app dans le m√™me repo Docker Hub
    image: docker.io/${DOCKERHUB_NAMESPACE}/voting-app:result-app-${IMAGE_TAG}
    build: ./result
    ports:
      - "${RESULT_PORT}:443"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - front-tier

  worker:
    # üè∑Ô∏è Tag unique pour le service Worker dans le m√™me repo Docker Hub
    image: docker.io/${DOCKERHUB_NAMESPACE}/voting-app:worker-${IMAGE_TAG}
    build: ./worker
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - back-tier

networks:
  front-tier:
    driver: bridge
    ipam:
      config:
        - subnet: 172.40.0.0/16

  back-tier:
    driver: bridge
    ipam:
      config:
        - subnet: 172.41.0.0/16

volumes:
  db-data:
  redis-data:
  jenkins_home:

